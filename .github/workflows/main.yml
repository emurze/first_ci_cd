name: Django CI

on: [push]

env:
  CLI_DOCKER_USERNAME: emurze
  SECRET_KEY: django-insecure-@l8=fm$s+-mjm-2i0)uoly9j+2pctx@+^k27(g$(bqw%i%jk-$
  DEBUG: 1
  LOGGING_LEVEL: DEBUG
  DB_NAME: todo
  DB_USER: todo
  DB_PASSWORD: 12345678
  STAGE_SERVER: localhost

  POSTGRES_DB: todo
  POSTGRES_USER: todo
  POSTGRES_PASSWORD: 12345678

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Repository
        uses: actions/checkout@v4

      - name: Install Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install flake8
        run: |
          pip install flake8

      - name: Lint with flake8
        run: |
          flake8 --config setup.cfg src

  unit-integration-tests:
    needs: lint
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:13.0-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: $POSTGRES_DB
          POSTGRES_USER: $POSTGRES_USER
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    steps:
      - name: Set up Repository
        uses: actions/checkout@v4

      - name: Create Log File
        run: |
          mkdir src/logs && touch src/logs/general.log

      - name: Install Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Poetry
        run: |
          pip install poetry==1.7.1

      - name: Install Dependencies
        run: |
          poetry install

      - name: Run Unit and Integration Tests
        run: |
          bash -c "cd src &&
                   poetry run coverage run --rcfile ../setup.cfg --data-file logs/.coverage manage.py test &&
                   poetry run coverage report --rcfile ../setup.cfg --data-file logs/.coverage"

  build:
    needs: unit-integration-tests
    runs-on: ubuntu-latest
    steps:
    - name: Set up Repository
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      with:
        username: ${{ env.CLI_DOCKER_USERNAME }}
        password: ${{ secrets.CLI_DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
      with:
        context: .
        file: ./dockerfile
        push: true
        tags: emurze/todo:1

  end-to-end-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Repository
        uses: actions/checkout@v4

      - name: Create Log File
        run: |
          mkdir src/logs && touch src/logs/general.log

      - uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.14.2'

      - name: Run production server
        run: |
          echo "SECRET_KEY=$SECRET_KEY" >> env/.todo.env
          echo "DEBUG=$DEBUG" >> env/.todo.env
          echo "LOGGING_LEVEL=$LOGGING_LEVEL" >> env/.todo.env
          echo "DB_NAME=$DB_NAME" >> env/.todo.env
          echo "DB_USER=$DB_USER" >> env/.todo.env
          echo "DB_PASSWORD=$DB_PASSWORD" >> env/.todo.env
          echo "STAGE_SERVER=$STAGE_SERVER" >> env/.todo.env

          echo "POSTGRES_DB=$POSTGRES_DB" >> env/.db.env
          echo "POSTGRES_USER=$POSTGRES_USER" >> env/.db.env
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> env/.db.env
          
          docker compose -f docker-compose.prod.yml up -d

      - name: Run End-To-End tests
        run: |
          docker exec -it todo bash -c "poetry run python3 src/manage.py test tests"
